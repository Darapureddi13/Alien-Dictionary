from collections import defaultdict, deque
def find_alien_alphabet(words):
    if not words:
        return ""
    graph = defaultdict(set)
    in_degree = defaultdict(int)
    for word in words:
        for char in word:
            in_degree[char] = in_degree.get(char, 0)
    for i in range(len(words) - 1):
        word1, word2 = words[i], words[i + 1]
        found_diff = False
        for j in range(min(len(word1), len(word2))):
            char1, char2 = word1[j], word2[j]
            if char1 != char2:
                if char2 not in graph[char1]:
                    graph[char1].add(char2)
                    in_degree[char2] += 1
                found_diff = True
                break
        if not found_diff and len(word1) > len(word2):
            return ""
    queue = deque([char for char in in_degree if in_degree[char] == 0])
    alphabet = []
    while queue:
        if len(queue) > 1:
            pass
        current = queue.popleft()
        alphabet.append(current)
        for neighbor in graph[current]:
            in_degree[neighbor] -= 1
            if in_degree[neighbor] == 0:
                queue.append(neighbor)
    if len(alphabet) == len(in_degree):
        return ''.join(alphabet)
    else:
        return ""
def test_alien_alphabet():
    
    
    """Test cases for alien alphabet detection"""
    print("RUNNING TEST CASES...\n")
    
    # Test Case 1: Simple case
    words1 = ["wrt", "wrf", "er", "ett", "rftt"]
    expected1 = "wertf"
    result1 = find_alien_alphabet(words1)
    print(f"Test 1 - Simple case:\nInput: {words1}\nExpected: {expected1}\nGot: {result1}\n")
    assert result1 == expected1
    
    # Test Case 2: All words same
    words2 = ["abc", "abc"]
    expected2 = "abc"
    result2 = find_alien_alphabet(words2)
    print(f"Test 2 - All words same:\nInput: {words2}\nExpected: {expected2}\nGot: {result2}\n")
    assert result2 == expected2
    print("All test cases passed!")
if __name__ == "__main__":
    test_alien_alphabet()
